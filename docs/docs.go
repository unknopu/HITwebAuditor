// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/partners/notification": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create Notification",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Notification"
                ],
                "summary": "Create Notification",
                "parameters": [
                    {
                        "description": "form for create notification",
                        "name": "NotificationForm",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/partner.NotificationForm"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Message"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/partner.ApiError"
                        }
                    }
                }
            }
        },
        "/partners/orders": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "OrderUpdate order update status",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orders"
                ],
                "summary": "OrderUpdate order update status",
                "parameters": [
                    {
                        "description": "form for order update",
                        "name": "OrderUpdateForm",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/partner.OrderUpdateForm"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Message"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/partner.ApiError"
                        }
                    }
                }
            }
        },
        "/partners/orders/cancel": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "CancelOrderForm cancel order",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orders"
                ],
                "summary": "CancelOrderForm cancel order",
                "parameters": [
                    {
                        "description": "form for cancel order",
                        "name": "CancelOrderForm",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/partner.CancelOrderForm"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Message"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/partner.ApiError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "partner.ApiError": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "code = 9001 member not found\ncode = 9999 internal server error",
                    "type": "string"
                },
                "message": {
                    "description": "message = 9001 member not found.\nmessage = 9999 internal server error",
                    "type": "string"
                }
            }
        },
        "partner.CancelOrderForm": {
            "type": "object",
            "properties": {
                "member": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "orderno": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "partner.Member": {
            "type": "object",
            "required": [
                "ecouponcode",
                "membercode"
            ],
            "properties": {
                "ecouponcode": {
                    "type": "string"
                },
                "membercode": {
                    "type": "string"
                }
            }
        },
        "partner.NotificationForm": {
            "type": "object",
            "required": [
                "data",
                "expire",
                "message",
                "title",
                "type"
            ],
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/partner.Member"
                    }
                },
                "expire": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "send_now": {
                    "type": "boolean"
                },
                "title": {
                    "type": "string"
                },
                "type": {
                    "description": "type = 1 message",
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "partner.OrderUpdateForm": {
            "type": "object",
            "properties": {
                "createdate": {
                    "type": "string"
                },
                "expireddate": {
                    "type": "string"
                },
                "member": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "orderno": {
                    "type": "string"
                },
                "qrcode": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "response.Message": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "success"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1.0",
	Host:        "localhost:8000",
	BasePath:    "/api/v1",
	Schemes:     []string{},
	Title:       "Boot Mobile API DOCS",
	Description: "This is a sample server celler server.",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
